{"name":"Sshoogr-gradle","tagline":"A Gradle plugin for working with remote SSH servers.","body":"# gradle-ssh-plugin\r\n\r\n## Overview\r\n\r\nThe `gradle-ssh-plugin` is a **Gradle** plugin for working with remote **SSH** servers. It allows connecting, executing \r\nremote commands, coping files and directories, creating tunnels in a simple and concise way.\r\n\r\nThe plugin was jointly developed by **Aestas/IT** (http://aestasit.com) and **NetCompany A/S** (http://www.netcompany.com/) \r\nto support quickly growing operations and hosting department.\r\n\r\n### Quick example\r\n\r\nThis is a simple example of some **SSH** features available in the plugin:\r\n\r\n    task remoteTask << {\r\n      remoteSession(\"user:password@localhost:22\") {\r\n        exec 'rm -rf /tmp/cache/'\r\n        scp \"$buildDir/cache.content\", '/tmp/cache/cache.content'        \r\n      }\r\n    }\r\n\r\n### Adding plugin to the build\r\n\r\nThe first thing you need to do in order to use the plugin is to define a build script dependency to a remote repository \r\n(https://oss.sonatype.org/content/repositories/snapshots), which contains plugin's library:\r\n\r\n    buildscript {\r\n      repositories {\r\n        maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" }\r\n      }\r\n      dependencies {\r\n        classpath 'com.aestasit.gradle:gradle-ssh-plugin:0.8-SNAPSHOT'\r\n      }\r\n    }\r\n\r\nAnd then apply the plugin:\r\n    \r\n    apply plugin: 'secureShell'\r\n\r\nPlugin can be configured with the help of `sshOptions` structure:\r\n\r\n    sshOptions {\r\n      ...\r\n    }\r\n\r\nIt also gives access to a set of methods (`remoteSession`, `exec`, `scp` etc.) defined by **Groovy SSH DSL**. \r\n\r\nFor documentation on **Groovy SSH DSL**, please, refer to https://github.com/aestasit/groovy-ssh-dsl.\r\nâ€ƒ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}